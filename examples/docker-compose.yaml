# Docker Compose setup for Valet monitoring stack
# 
# This provides a complete observability platform including:
# - Prometheus for metrics collection
# - Grafana for visualization
# - Alertmanager for alert routing
# - OpenTelemetry Collector for traces and metrics

version: '3.8'

services:
  # OpenTelemetry Collector - receives traces and metrics from Valet
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: valet-otel-collector
    volumes:
      - ./otel-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check extension
      - "55679:55679" # ZPages extension
    command: ["--config=/etc/otel-collector-config.yaml"]
    networks:
      - valet-monitoring

  # Prometheus - scrapes metrics from Valet and OpenTelemetry Collector
  prometheus:
    image: prom/prometheus:latest
    container_name: valet-prometheus
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml
      - ./prometheus-alerts.yaml:/etc/prometheus/alerts.yml
      - ./valet-targets.json:/etc/prometheus/valet-targets.json
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"  # Prometheus UI
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - valet-monitoring

  # Grafana - visualization
  grafana:
    image: grafana/grafana:latest
    container_name: valet-grafana
    ports:
      - "3000:3000"  # Grafana UI
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    networks:
      - valet-monitoring
    depends_on:
      - prometheus

  # Alertmanager - handles alerts from Prometheus
  alertmanager:
    image: prom/alertmanager:latest
    container_name: valet-alertmanager
    volumes:
      - ./alertmanager-config.yaml:/etc/alertmanager/config.yml
      - alertmanager-data:/alertmanager
    ports:
      - "9093:9093"  # Alertmanager UI
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - valet-monitoring

  # Jaeger - distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: valet-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC for model.proto
    networks:
      - valet-monitoring

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  valet-monitoring:
    driver: bridge

# Usage:
# 1. Start the stack:
#    docker-compose up -d
#
# 2. Configure Valet to send telemetry:
#    valet generate --telemetry-enabled --telemetry-exporter otlp \
#      --telemetry-endpoint localhost:4317 --config-file examples/helm-config-with-metrics.yaml
#
# 3. Access services:
#    - Prometheus: http://localhost:9091
#    - Grafana: http://localhost:3000
#    - Jaeger: http://localhost:16686
#    - Alertmanager: http://localhost:9093
#
# 4. Import Grafana dashboard:
#    - Go to Grafana (http://localhost:3000)
#    - Navigate to Dashboards > Import
#    - Upload grafana-dashboard.json