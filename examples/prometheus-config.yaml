# Example Prometheus configuration for monitoring Valet
#
# This configuration demonstrates how to:
# 1. Scrape Valet metrics
# 2. Load alerting rules
# 3. Configure remote write for long-term storage
# 4. Set up service discovery

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'valet-monitor'
    environment: 'production'

# Load alerting rules
rule_files:
  - 'prometheus-alerts.yaml'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - localhost:9093

# Scrape configurations
scrape_configs:
  # Scrape Valet metrics
  - job_name: 'valet'
    scrape_interval: 10s
    static_configs:
      - targets: ['localhost:9090']
        labels:
          service: 'valet'
          instance: 'primary'
    
    # Optional: Add metric relabeling
    metric_relabel_configs:
      # Drop high-cardinality histogram buckets if needed
      - source_labels: [__name__]
        regex: 'valet_.*_bucket'
        action: drop
        # Uncomment above to drop histogram buckets

  # Example: Scrape multiple Valet instances
  - job_name: 'valet-instances'
    scrape_interval: 10s
    file_sd_configs:
      - files:
          - 'valet-targets.json'
        refresh_interval: 30s

  # Example: Kubernetes service discovery for Valet
  - job_name: 'valet-k8s'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - default
            - valet
    relabel_configs:
      # Only scrape pods with annotation prometheus.io/scrape=true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      # Use prometheus.io/port annotation for port
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # Add Kubernetes labels
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name
      - source_labels: [__meta_kubernetes_pod_label_app]
        target_label: app

# Remote write configuration for long-term storage
remote_write:
  - url: 'http://localhost:9201/write'
    queue_config:
      max_samples_per_send: 10000
      batch_send_deadline: 5s
    write_relabel_configs:
      # Only send valet metrics to remote storage
      - source_labels: [__name__]
        regex: 'valet_.*'
        action: keep

# Example recording rules for performance
# Create a separate file 'recording-rules.yaml' and add to rule_files
# groups:
#   - name: valet_recording
#     interval: 30s
#     rules:
#       # Pre-calculate command success rate
#       - record: valet:command_success_rate
#         expr: |
#           1 - (
#             sum(rate(valet_command_errors_total[5m])) by (command)
#             /
#             sum(rate(valet_command_executions_total[5m])) by (command)
#           )
#       
#       # Pre-calculate p95 latencies
#       - record: valet:command_duration_p95
#         expr: |
#           histogram_quantile(0.95,
#             sum(rate(valet_command_duration_seconds_bucket[5m])) by (command, le)
#           )